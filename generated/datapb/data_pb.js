/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.puppet.datapb.Data', null, global);
goog.exportSymbol('proto.puppet.datapb.DataArray', null, global);
goog.exportSymbol('proto.puppet.datapb.DataEntry', null, global);
goog.exportSymbol('proto.puppet.datapb.DataHash', null, global);
goog.exportSymbol('proto.puppet.datapb.NullValue', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.puppet.datapb.DataHash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.puppet.datapb.DataHash.repeatedFields_, null);
};
goog.inherits(proto.puppet.datapb.DataHash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.puppet.datapb.DataHash.displayName = 'proto.puppet.datapb.DataHash';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.puppet.datapb.DataHash.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.puppet.datapb.DataHash.prototype.toObject = function(opt_includeInstance) {
  return proto.puppet.datapb.DataHash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.puppet.datapb.DataHash} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.puppet.datapb.DataHash.toObject = function(includeInstance, msg) {
  var f, obj = {
    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
    proto.puppet.datapb.DataEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.puppet.datapb.DataHash}
 */
proto.puppet.datapb.DataHash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.puppet.datapb.DataHash;
  return proto.puppet.datapb.DataHash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.puppet.datapb.DataHash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.puppet.datapb.DataHash}
 */
proto.puppet.datapb.DataHash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.puppet.datapb.DataEntry;
      reader.readMessage(value,proto.puppet.datapb.DataEntry.deserializeBinaryFromReader);
      msg.addEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.puppet.datapb.DataHash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.puppet.datapb.DataHash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.puppet.datapb.DataHash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.puppet.datapb.DataHash.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.puppet.datapb.DataEntry.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DataEntry entries = 1;
 * @return {!Array.<!proto.puppet.datapb.DataEntry>}
 */
proto.puppet.datapb.DataHash.prototype.getEntriesList = function() {
  return /** @type{!Array.<!proto.puppet.datapb.DataEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.puppet.datapb.DataEntry, 1));
};


/** @param {!Array.<!proto.puppet.datapb.DataEntry>} value */
proto.puppet.datapb.DataHash.prototype.setEntriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.puppet.datapb.DataEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.puppet.datapb.DataEntry}
 */
proto.puppet.datapb.DataHash.prototype.addEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.puppet.datapb.DataEntry, opt_index);
};


proto.puppet.datapb.DataHash.prototype.clearEntriesList = function() {
  this.setEntriesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.puppet.datapb.DataEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.puppet.datapb.DataEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.puppet.datapb.DataEntry.displayName = 'proto.puppet.datapb.DataEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.puppet.datapb.DataEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.puppet.datapb.DataEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.puppet.datapb.DataEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.puppet.datapb.DataEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.puppet.datapb.Data.toObject(includeInstance, f),
    value: (f = msg.getValue()) && proto.puppet.datapb.Data.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.puppet.datapb.DataEntry}
 */
proto.puppet.datapb.DataEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.puppet.datapb.DataEntry;
  return proto.puppet.datapb.DataEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.puppet.datapb.DataEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.puppet.datapb.DataEntry}
 */
proto.puppet.datapb.DataEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.puppet.datapb.Data;
      reader.readMessage(value,proto.puppet.datapb.Data.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.puppet.datapb.Data;
      reader.readMessage(value,proto.puppet.datapb.Data.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.puppet.datapb.DataEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.puppet.datapb.DataEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.puppet.datapb.DataEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.puppet.datapb.DataEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.puppet.datapb.Data.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.puppet.datapb.Data.serializeBinaryToWriter
    );
  }
};


/**
 * optional Data key = 1;
 * @return {?proto.puppet.datapb.Data}
 */
proto.puppet.datapb.DataEntry.prototype.getKey = function() {
  return /** @type{?proto.puppet.datapb.Data} */ (
    jspb.Message.getWrapperField(this, proto.puppet.datapb.Data, 1));
};


/** @param {?proto.puppet.datapb.Data|undefined} value */
proto.puppet.datapb.DataEntry.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.puppet.datapb.DataEntry.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.puppet.datapb.DataEntry.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Data value = 2;
 * @return {?proto.puppet.datapb.Data}
 */
proto.puppet.datapb.DataEntry.prototype.getValue = function() {
  return /** @type{?proto.puppet.datapb.Data} */ (
    jspb.Message.getWrapperField(this, proto.puppet.datapb.Data, 2));
};


/** @param {?proto.puppet.datapb.Data|undefined} value */
proto.puppet.datapb.DataEntry.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.puppet.datapb.DataEntry.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.puppet.datapb.DataEntry.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.puppet.datapb.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.puppet.datapb.Data.oneofGroups_);
};
goog.inherits(proto.puppet.datapb.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.puppet.datapb.Data.displayName = 'proto.puppet.datapb.Data';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.puppet.datapb.Data.oneofGroups_ = [[1,2,3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.puppet.datapb.Data.KindCase = {
  KIND_NOT_SET: 0,
  UNDEF_VALUE: 1,
  INTEGER_VALUE: 2,
  FLOAT_VALUE: 3,
  STRING_VALUE: 4,
  BOOLEAN_VALUE: 5,
  HASH_VALUE: 6,
  ARRAY_VALUE: 7,
  BINARY_VALUE: 8,
  REFERENCE: 9
};

/**
 * @return {proto.puppet.datapb.Data.KindCase}
 */
proto.puppet.datapb.Data.prototype.getKindCase = function() {
  return /** @type {proto.puppet.datapb.Data.KindCase} */(jspb.Message.computeOneofCase(this, proto.puppet.datapb.Data.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.puppet.datapb.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.puppet.datapb.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.puppet.datapb.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.puppet.datapb.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    undefValue: jspb.Message.getFieldWithDefault(msg, 1, 0),
    integerValue: jspb.Message.getFieldWithDefault(msg, 2, 0),
    floatValue: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    stringValue: jspb.Message.getFieldWithDefault(msg, 4, ""),
    booleanValue: jspb.Message.getFieldWithDefault(msg, 5, false),
    hashValue: (f = msg.getHashValue()) && proto.puppet.datapb.DataHash.toObject(includeInstance, f),
    arrayValue: (f = msg.getArrayValue()) && proto.puppet.datapb.DataArray.toObject(includeInstance, f),
    binaryValue: msg.getBinaryValue_asB64(),
    reference: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.puppet.datapb.Data}
 */
proto.puppet.datapb.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.puppet.datapb.Data;
  return proto.puppet.datapb.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.puppet.datapb.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.puppet.datapb.Data}
 */
proto.puppet.datapb.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.puppet.datapb.NullValue} */ (reader.readEnum());
      msg.setUndefValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntegerValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFloatValue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBooleanValue(value);
      break;
    case 6:
      var value = new proto.puppet.datapb.DataHash;
      reader.readMessage(value,proto.puppet.datapb.DataHash.deserializeBinaryFromReader);
      msg.setHashValue(value);
      break;
    case 7:
      var value = new proto.puppet.datapb.DataArray;
      reader.readMessage(value,proto.puppet.datapb.DataArray.deserializeBinaryFromReader);
      msg.setArrayValue(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBinaryValue(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.puppet.datapb.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.puppet.datapb.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.puppet.datapb.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.puppet.datapb.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.puppet.datapb.NullValue} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getHashValue();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.puppet.datapb.DataHash.serializeBinaryToWriter
    );
  }
  f = message.getArrayValue();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.puppet.datapb.DataArray.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt64(
      9,
      f
    );
  }
};


/**
 * optional NullValue undef_value = 1;
 * @return {!proto.puppet.datapb.NullValue}
 */
proto.puppet.datapb.Data.prototype.getUndefValue = function() {
  return /** @type {!proto.puppet.datapb.NullValue} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.puppet.datapb.NullValue} value */
proto.puppet.datapb.Data.prototype.setUndefValue = function(value) {
  jspb.Message.setOneofField(this, 1, proto.puppet.datapb.Data.oneofGroups_[0], value);
};


proto.puppet.datapb.Data.prototype.clearUndefValue = function() {
  jspb.Message.setOneofField(this, 1, proto.puppet.datapb.Data.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.puppet.datapb.Data.prototype.hasUndefValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 integer_value = 2;
 * @return {number}
 */
proto.puppet.datapb.Data.prototype.getIntegerValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.puppet.datapb.Data.prototype.setIntegerValue = function(value) {
  jspb.Message.setOneofField(this, 2, proto.puppet.datapb.Data.oneofGroups_[0], value);
};


proto.puppet.datapb.Data.prototype.clearIntegerValue = function() {
  jspb.Message.setOneofField(this, 2, proto.puppet.datapb.Data.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.puppet.datapb.Data.prototype.hasIntegerValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double float_value = 3;
 * @return {number}
 */
proto.puppet.datapb.Data.prototype.getFloatValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.puppet.datapb.Data.prototype.setFloatValue = function(value) {
  jspb.Message.setOneofField(this, 3, proto.puppet.datapb.Data.oneofGroups_[0], value);
};


proto.puppet.datapb.Data.prototype.clearFloatValue = function() {
  jspb.Message.setOneofField(this, 3, proto.puppet.datapb.Data.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.puppet.datapb.Data.prototype.hasFloatValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string string_value = 4;
 * @return {string}
 */
proto.puppet.datapb.Data.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.puppet.datapb.Data.prototype.setStringValue = function(value) {
  jspb.Message.setOneofField(this, 4, proto.puppet.datapb.Data.oneofGroups_[0], value);
};


proto.puppet.datapb.Data.prototype.clearStringValue = function() {
  jspb.Message.setOneofField(this, 4, proto.puppet.datapb.Data.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.puppet.datapb.Data.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool boolean_value = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.puppet.datapb.Data.prototype.getBooleanValue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.puppet.datapb.Data.prototype.setBooleanValue = function(value) {
  jspb.Message.setOneofField(this, 5, proto.puppet.datapb.Data.oneofGroups_[0], value);
};


proto.puppet.datapb.Data.prototype.clearBooleanValue = function() {
  jspb.Message.setOneofField(this, 5, proto.puppet.datapb.Data.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.puppet.datapb.Data.prototype.hasBooleanValue = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional DataHash hash_value = 6;
 * @return {?proto.puppet.datapb.DataHash}
 */
proto.puppet.datapb.Data.prototype.getHashValue = function() {
  return /** @type{?proto.puppet.datapb.DataHash} */ (
    jspb.Message.getWrapperField(this, proto.puppet.datapb.DataHash, 6));
};


/** @param {?proto.puppet.datapb.DataHash|undefined} value */
proto.puppet.datapb.Data.prototype.setHashValue = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.puppet.datapb.Data.oneofGroups_[0], value);
};


proto.puppet.datapb.Data.prototype.clearHashValue = function() {
  this.setHashValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.puppet.datapb.Data.prototype.hasHashValue = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional DataArray array_value = 7;
 * @return {?proto.puppet.datapb.DataArray}
 */
proto.puppet.datapb.Data.prototype.getArrayValue = function() {
  return /** @type{?proto.puppet.datapb.DataArray} */ (
    jspb.Message.getWrapperField(this, proto.puppet.datapb.DataArray, 7));
};


/** @param {?proto.puppet.datapb.DataArray|undefined} value */
proto.puppet.datapb.Data.prototype.setArrayValue = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.puppet.datapb.Data.oneofGroups_[0], value);
};


proto.puppet.datapb.Data.prototype.clearArrayValue = function() {
  this.setArrayValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.puppet.datapb.Data.prototype.hasArrayValue = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bytes binary_value = 8;
 * @return {!(string|Uint8Array)}
 */
proto.puppet.datapb.Data.prototype.getBinaryValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes binary_value = 8;
 * This is a type-conversion wrapper around `getBinaryValue()`
 * @return {string}
 */
proto.puppet.datapb.Data.prototype.getBinaryValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBinaryValue()));
};


/**
 * optional bytes binary_value = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBinaryValue()`
 * @return {!Uint8Array}
 */
proto.puppet.datapb.Data.prototype.getBinaryValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBinaryValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.puppet.datapb.Data.prototype.setBinaryValue = function(value) {
  jspb.Message.setOneofField(this, 8, proto.puppet.datapb.Data.oneofGroups_[0], value);
};


proto.puppet.datapb.Data.prototype.clearBinaryValue = function() {
  jspb.Message.setOneofField(this, 8, proto.puppet.datapb.Data.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.puppet.datapb.Data.prototype.hasBinaryValue = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int64 reference = 9;
 * @return {number}
 */
proto.puppet.datapb.Data.prototype.getReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.puppet.datapb.Data.prototype.setReference = function(value) {
  jspb.Message.setOneofField(this, 9, proto.puppet.datapb.Data.oneofGroups_[0], value);
};


proto.puppet.datapb.Data.prototype.clearReference = function() {
  jspb.Message.setOneofField(this, 9, proto.puppet.datapb.Data.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.puppet.datapb.Data.prototype.hasReference = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.puppet.datapb.DataArray = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.puppet.datapb.DataArray.repeatedFields_, null);
};
goog.inherits(proto.puppet.datapb.DataArray, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.puppet.datapb.DataArray.displayName = 'proto.puppet.datapb.DataArray';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.puppet.datapb.DataArray.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.puppet.datapb.DataArray.prototype.toObject = function(opt_includeInstance) {
  return proto.puppet.datapb.DataArray.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.puppet.datapb.DataArray} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.puppet.datapb.DataArray.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.puppet.datapb.Data.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.puppet.datapb.DataArray}
 */
proto.puppet.datapb.DataArray.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.puppet.datapb.DataArray;
  return proto.puppet.datapb.DataArray.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.puppet.datapb.DataArray} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.puppet.datapb.DataArray}
 */
proto.puppet.datapb.DataArray.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.puppet.datapb.Data;
      reader.readMessage(value,proto.puppet.datapb.Data.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.puppet.datapb.DataArray.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.puppet.datapb.DataArray.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.puppet.datapb.DataArray} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.puppet.datapb.DataArray.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.puppet.datapb.Data.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Data values = 1;
 * @return {!Array.<!proto.puppet.datapb.Data>}
 */
proto.puppet.datapb.DataArray.prototype.getValuesList = function() {
  return /** @type{!Array.<!proto.puppet.datapb.Data>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.puppet.datapb.Data, 1));
};


/** @param {!Array.<!proto.puppet.datapb.Data>} value */
proto.puppet.datapb.DataArray.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.puppet.datapb.Data=} opt_value
 * @param {number=} opt_index
 * @return {!proto.puppet.datapb.Data}
 */
proto.puppet.datapb.DataArray.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.puppet.datapb.Data, opt_index);
};


proto.puppet.datapb.DataArray.prototype.clearValuesList = function() {
  this.setValuesList([]);
};


/**
 * @enum {number}
 */
proto.puppet.datapb.NullValue = {
  NULL_VALUE: 0
};

goog.object.extend(exports, proto.puppet.datapb);
